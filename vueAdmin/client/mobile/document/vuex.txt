什么是状态？
当前样子，可以发生变化，开始的状态，结束的状态。

什么是状态管理？
让状态以一定形式定义，一定的形式改变，一定的形式获取，提供一个规则

Vuex 是什么？
是专门针对vue提供的状态管理模式。
它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。
Vuex 也集成到 Vue 的官方调试工具 devtools extension，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能

为什么要用vuex？
为了更好的管理状态，在之前组件内部状态的应用中发现，每个组件的状态都是独立的，如果存在好多组件公用的状态通讯起来比较麻烦
vuex的出现，他是将所有数据状态集中式存储管理，变成了一个，在组件中以相应的规则去读取改变。

有什么能够替代vuex，但是为什么不用？
可以使用redux或者将数据定义在vue根实例中，或者定义全局变量
redux：他并不是针对vue专门做处理的，无法同步状态和视图之间的转换
vue根实例：因为vue根实例的定义是整个应用程序，而不是数据管理
全局变量：var store = {}, 没有规则，无法同步状态和视图之间的转换
vuex：专门针对vue开发的一套以集中式的存储管理整个状态树，并且以对应的规则进行数据的管理，而且还兼容vue的数据检测


vuex的核心概念
state: 唯一数据源, 定义在store中的state选项，在组件中可以通过this.$store.state读取，一半都写在计算属性中，可以通过mapState()函数生成计算属性
getters：相当于组件中的计算属性， 定义在store中getters选项中，在组件中通过$store.getters获取，一半都写在计算属性中，可以通过mapGetters()函数生成计算属性
        getters: {
            计算属性名称 (state, getters) => {
                return 返回值
            }
        }

mutation: 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，
          并且它会接受 state 作为第一个参数, 其他参数为第二个， 通过commit可以执行他
          注意：Mutation 必须是同步函数
          因为mutation中除了改变state之外还将state改变的过程快照记录了下来，如果在mutation中写异步逻辑的话就无法记录快照了

actions： 用来提交mutations，可以处理异步逻辑，但是不能直接修改state，只能通过commit('mutation')的形式改变state，actions函数接收一个context对象（类似于store实例）

